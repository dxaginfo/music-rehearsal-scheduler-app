generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(uuid())
  email             String              @unique
  passwordHash      String
  firstName         String
  lastName          String
  phoneNumber       String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  bands             BandMember[]
  createdBands      Band[]              @relation("BandCreator")
  createdRehearsals Rehearsal[]         @relation("RehearsalCreator")
  availability      Availability[]
  blockedDates      BlockedDate[]
  rehearsalAttendance RehearsalAttendance[]
  settings          UserSettings?
}

model Band {
  id           String       @id @default(uuid())
  name         String
  description  String?
  createdById  String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  members      BandMember[]
  rehearsals   Rehearsal[]
  createdBy    User         @relation("BandCreator", fields: [createdById], references: [id])
}

model BandMember {
  id          String   @id @default(uuid())
  bandId      String
  userId      String
  role        Role     @default(MEMBER)
  instrument  String?
  joinDate    DateTime @default(now())
  status      MemberStatus @default(ACTIVE)
  band        Band     @relation(fields: [bandId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([bandId, userId])
}

model Availability {
  id         String   @id @default(uuid())
  userId     String
  dayOfWeek  Int
  startTime  DateTime
  endTime    DateTime
  recurring  Boolean  @default(true)
  startDate  DateTime?
  endDate    DateTime?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BlockedDate {
  id        String   @id @default(uuid())
  userId    String
  date      DateTime
  reason    String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Rehearsal {
  id          String       @id @default(uuid())
  bandId      String
  title       String
  description String?
  location    String?
  startTime   DateTime
  endTime     DateTime
  createdById String
  status      RehearsalStatus @default(SCHEDULED)
  notes       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  band        Band         @relation(fields: [bandId], references: [id], onDelete: Cascade)
  createdBy   User         @relation("RehearsalCreator", fields: [createdById], references: [id])
  attendance  RehearsalAttendance[]
  songs       RehearsalSong[]
}

model RehearsalAttendance {
  id           String       @id @default(uuid())
  rehearsalId  String
  userId       String
  status       AttendanceStatus @default(NO_RESPONSE)
  responseTime DateTime?
  rehearsal    Rehearsal   @relation(fields: [rehearsalId], references: [id], onDelete: Cascade)
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([rehearsalId, userId])
}

model RehearsalSong {
  id           String     @id @default(uuid())
  rehearsalId  String
  songName     String
  notes        String?
  order        Int
  rehearsal    Rehearsal  @relation(fields: [rehearsalId], references: [id], onDelete: Cascade)
}

model UserSettings {
  id                    String @id @default(uuid())
  userId                String @unique
  notificationPreferences Json?
  calendarSyncSettings   Json?
  themePreferences       String?
  timezone               String @default("UTC")
  user                   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  MEMBER
  GUEST
}

enum MemberStatus {
  ACTIVE
  INACTIVE
}

enum RehearsalStatus {
  SCHEDULED
  CANCELED
  COMPLETED
}

enum AttendanceStatus {
  CONFIRMED
  DECLINED
  NO_RESPONSE
  ATTENDED
  NO_SHOW
}
